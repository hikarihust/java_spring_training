Môi trường
	Java 8
	Hibernate: 5.x 
	SpringMVC: 5.x + Spring boot 2.x
	MySQL
	Web server: Tomcat 7
Cài đặt:
	Eclipse
	JDK8(Java 8)
	Xampp
Cài đặt biến môi trường
	JAVA_HOME: C:\Program Files\Java\jdk1.8.0_231
	Path -> Edit -> New(%JAVA_HOME%\bin)

Giới thiệu về JDBC
	JDBC là 1 cầu nối giữa Java Application và Database(Java Database Conectivity)
	JDBC cũng cấp cho mình 1 số class và interface để tạo lập các kết nối giữa Java Application và Database
	New project -> Maven -> Maven project(create a simple project)
		Maven là 1 tool giúp quản lý các thư viện 1 cách dễ dàng hơn
		Khi sử dụng thư viện của 1 bên thứ 3 thì chỉ cần khai báo các dependency
	Group id: come.tedu
	Artifact Id: jdbc-test
	Packaging: war
	Để kết nối giữa Java Application và Database thì cần phải có Driver
	Driver: mysql connector maven 
		keyword: mysql connector maven 5.1
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>
	-> pom.xml -> <dependencies></dependencies> 
	Maven sẽ tự động download source code, để kiểm tra xem có hay chưa thì kiểm tra ở Maven Dependencies
	src/main/java -> Tạo ra class Main
	localhost/phpmyadmin
		Tạo 1 Schema: jdbc-test
		Tạo bảng student: id, Name, Age, Address

==============================================================================================================
								Hibernate

Phần 1
	JDBC giúp thực hiện các câu lệnh truy vấn như insert, update...
	JDBC phụ thuộc vào hệ quản trị cơ sỏ dữ liệu, khi chuyển sang các hệ quản trị dữ liệu khác thì các câu truy vấn 
		phải viết lại
		Khi muốn lấy dữ liệu thì cần lấy từng cột một rồi mapping các trường muốn gán vào ở trong java
	Hibernate là 1 ORM Framework thực hiện mapping từ CSDL sang các object trong java
	Group id: come.tedu
	Artifact Id: hibernate_ex
	Packaging: war
	Cấu hình Hibernate, tạo ra các object mapping từ cơ sở dữ liệu
		MySQL connector
		Hibernate
			keyword: Hibernate maven 5.1
		Để tạo ra các file mapping(Bằng tool)
			Eclipse(help) -> Eclipse Marketplace -> Find: jboss
				-> Cài đặt JBoss Tools 4.14	Final -> Hibernate Tools -> Restart lại Eclipse
		Kết nối Eclipse với Database ứng dụng
			Trường hợp không có Database Development
				Don't have “Database Development Perspective” in Eclipse Java SE IDE
			Eclipse(help) -> Install New Software
				--All Available Sites--
				Database Development
			Eclipse(Open Perpective) -> Database Development -> Open
				Database Connections -> New -> MySQL -> Name: hibernate_ex
					Driver: MySQL JDBC Driver 5.1
					Driver Name: MySQL JDBC Driver Hibernate
					JAR List: 
						keyword: MySQL connector 5.1 jar -> download
						Add JAR
					Database: hibernate
					URL: jdbc:mysql://localhost:3306/hibernate
					Test Connections(OK)
			Eclipse(Open Perpective) -> Hibernate -> Add Configuration
				Hibernate Version: 3.5
				Project: hibernate_ex 
				Database Connections: hibernate_ex
				Configuration file: 
					Setup -> create new -> resources
						Hibernate Version: 3.5
						Get values from Connections
			hibernate -> Run(Hibernate Code Generation Configurations)
				Hibernate Code Generation -> New_configuảtion
					Main
						Console configuration: hibernate
						Output directory: hibernate_ex -> src -> main -> java
						Reverse engineer from JDBC Connections
						Package: model(Chứa các file mapping)
					Exporters: 
						Domain code
						Hibernate XML Mapping
Phần 2
	src/main/resources/hibernate.cfg.xml
		Khai báo vị của các file mapping
			<mapping resource="model/Category.hbm.xml"/>
        	<mapping resource="model/Product.hbm.xml"/>
	src/main/java
		Tạo mới 1 Package: dao(data access object) để thực hiện các thao tác với CSDL
			Tạo CategoryDAO Class
		Tạo mới package main
			Tạo mới class App.java
	Hibernate Lifecycle
		update() - merge()
			session.update(category);
			session.merge(category);
		session.evict(category);
		save() - persist()

==============================================================================================================
								Spring Core

Phần 1
	Dependency Injection
	Group id: tedu.spring
	Artifact Id: spring_ex
	Packaging: war
	src/main/java	
		package: spring.ex
	Source - Generate Getters and Setters

Phần 2
	IoC Container: Quản lý các object và Injection các đối tượng cần thiết vào trong project(Spring Compiler)
		Được tạo bởi các object Java và các file Metadata
	Bean: 
		Là những Java object được lắp ráp và quản lý bởi spring IOC Container
		Các bean được tảo bởi các Metadata được định nghĩa bằng các file XML hoặc dùng anotation
	Spring-core maven, Spring-context maven(5.1.3)
	Cài Spring cho Eclipse: Help -> Eclipse Marketplace
		Find: Spring IDE
	src/main/resources -> Add new(Spring Bean Configuration File)
		Nơi chứa file là resources/beans.xml
		-> Định nghĩa các thành phần trong project để spring core có thể đọc được và cấu thành IOC Compiler
		<property name="category" ref="samsungCategory"></property>  -> Setters
		<constructor-arg index="0" ref="appleCategory"></constructor-arg> -> Contructor 
			index: Thứ tự của các parameter

Phần 3
	Định nghĩa các bean dựa vào các anotation
	Có các anotation hay dùng:
		@Autowire: Là 1 anotation tự động liên kết, Inject các object cần thiết vào trong đối tượng
		@Component: Định nghĩa các thành phần mang tính phụ trợ cho việc thực thi các class
		@Repository: Đánh dấu các lớp DAO, cung cấp dữ liệu cho ứng dụng
		@Service: Gọi đến các lớp DAO
	Namespaces: context